#!/usr/bin/env perl

use strict;
use warnings;

use Data::Dumper;

use Cwd qw/abs_path getcwd/;
use File::Basename;
use Module::ScanDeps;
use Redis;

my $redis = redis_init();

my $file = shift @ARGV;

my $context = {
    cwd             => getcwd,
    file            => $file,
    file_abs_path   => abs_path( $file ),
    dir_abs_path    => dirname( abs_path( $file )),
    remote          => undef,
    args            => [ @ARGV ],
    debug           => 0,
};

if ( ! -e $context->{ file } ) {
    die "Input script $context->{ file } does not exists\n";
}

chdir $context->{ dir_abs_path };
$context->{ git_tree } = `git rev-parse --show-toplevel`;
chomp $context->{ git_tree };
chdir $context->{ cwd };

die "The command $file is not on a git_tree\n" if $?;

open my $fh, "<", "$ENV{ HOME }/.rperl_remote";  # data point
    $context->{ remote } = <$fh>;
close $fh;

die "There is no remote configured, please run rperl_host!\n" if ! $context->{ remote };

# For the first time sync, after followup the changed files
print "Prepare for: $context->{ file } from $context->{ cwd } @ $context->{ remote }\n";

my $remote_dir = dirname $context->{ git_tree };

my $r_mkdir = `ssh $context->{ remote } mkdir -p $remote_dir`;

my $sync_cmd = "rsync --cvs-exclude -a $context->{ git_tree } $context->{ remote }:$remote_dir";
my $sync = qx/$sync_cmd/;
print $sync_cmd, "\n";
if ( $? ) {
    die "$?\nError when syncing $context->{ remote }:$context->{ git_tree }\n";
}else{
    print "Syncronized $context->{ remote }:$context->{ git_tree }\n";
}

my $debug = $redis->get('enable_debug');

my $perl = $debug ? "perl -d" : "perl";

my @cmd = (
    'ssh', $context->{ remote }, 
    'echo -n "Remote Shell PID:";',
    'echo $$;', 
    "export PERL5LIB=$context->{ git_tree }/lib;", 
    'cd', "$context->{ cwd };", 
    'perl', $file,  @ARGV, ';', 
    'pgrep -P $$;'
    );

exec @cmd;


sub redis_init {
    my $tries = 3;
    my $redis;
    while ( $tries ) {
        $tries--;
        eval {
            $redis = Redis->new( server => 'localhost:6379' );
        } or do {
            warn "Is necessary run the redis server on the localhost!\n";
            my $redis = `which redis-server 2>/dev/null`;
            if ( $redis ) {
                my $pid = fork();
                if ( $pid ) {
                    warn "Started redis, trying again!\n";
                    sleep 1;
                }else{
                    exec $redis;
                }
            } else { 
                die "redis-server not found! Sorry I can't continue!\n";
            }
        };
        return $redis if $redis;
        # load config if redis
        warn "Trying more $tries times..\n";
    }
    die "Could not use redis or start it at all\n";
}


